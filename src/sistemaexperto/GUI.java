/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemaexperto;

import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.StringTokenizer;
import javax.swing.AbstractButton;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import jxl.Cell;
import jxl.CellType;
import jxl.Sheet;
import jxl.Workbook;

/**
 *
 * @author Alberto Vázquez.
 */
public class GUI extends javax.swing.JFrame {

    SistemaExperto sE;
    public ArrayList<String> hechosInicioResp = new ArrayList<>();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        initSistemaExperto();
        this.sE.cargarBaseConocimiento1();
    }

    public void initSistemaExperto() {
        sE = new SistemaExperto(jTextAreaResultado, jComboBoxHechos, this);
        this.actualizarListaHechos();
        this.actualizarListaReglaProduccion();
    }

    public void actualizarListaHechosSeleccionables() {
        jComboBoxHechos.removeAllItems();
        Collections.sort(sE.hechosSeleccionables, String.CASE_INSENSITIVE_ORDER);
        for (int i = 0; i < sE.hechosSeleccionables.size(); i++) {
            this.jComboBoxHechos.addItem(makeObj(sE.hechosSeleccionables.get(i)));
            this.agregarHecho(sE.hechosSeleccionables.get(i));
        }
    }

    private Object makeObj(final String item) {
        return new Object() {
            public String toString() {
                return item;
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        buttonGroupInduccionDeduccionAbduccion = new javax.swing.ButtonGroup();
        buttonGroupIndividualGeneral = new javax.swing.ButtonGroup();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroupMenu = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListReglas = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListHechos = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jButtonHecho = new javax.swing.JButton();
        jTextFieldRegla = new javax.swing.JTextField();
        jButtonRegla = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jRadioButtonInduccion = new javax.swing.JRadioButton();
        jRadioButtonDeduccion = new javax.swing.JRadioButton();
        jRadioButtonAbducción = new javax.swing.JRadioButton();
        jButtonEjecutar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaResultado = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBoxHechos = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Experto. Alberto Vázquez");
        setIconImage(new ImageIcon("C:\\Users\\Alberto\\Documents\\NetBeansProjects\\SistemaExperto\\src\\img\\PixelLightLogo.png").getImage());
        setName("Sistema Experto"); // NOI18N
        setResizable(false);

        jListReglas.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jScrollPane1.setViewportView(jListReglas);

        jLabel1.setText("Hechos de Inicio:");

        jListHechos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jListHechos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(jListHechos);

        jLabel2.setText("Reglas: ");

        jButtonHecho.setText("Agregar Hecho");
        jButtonHecho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHechoActionPerformed(evt);
            }
        });

        jTextFieldRegla.setToolTipText("Ejem: B+C->A");

        jButtonRegla.setText("Agregar Regla");
        jButtonRegla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReglaActionPerformed(evt);
            }
        });

        jLabel3.setText("Resultado: ");

        buttonGroupInduccionDeduccionAbduccion.add(jRadioButtonInduccion);
        jRadioButtonInduccion.setText("Inducción");

        buttonGroupInduccionDeduccionAbduccion.add(jRadioButtonDeduccion);
        jRadioButtonDeduccion.setSelected(true);
        jRadioButtonDeduccion.setText("Deducción");

        buttonGroupInduccionDeduccionAbduccion.add(jRadioButtonAbducción);
        jRadioButtonAbducción.setText("Abducción");
        jRadioButtonAbducción.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAbducciónActionPerformed(evt);
            }
        });

        jButtonEjecutar.setText("Run");
        jButtonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEjecutarActionPerformed(evt);
            }
        });

        jButton4.setText("Borrar Hecho");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Borrar Reglas");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextAreaResultado.setColumns(20);
        jTextAreaResultado.setRows(5);
        jScrollPane4.setViewportView(jTextAreaResultado);

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBoxHechos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxHechosKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBoxHechosKeyTyped(evt);
            }
        });

        jMenu2.setText("Archivo");

        jMenuItem2.setText("Cargar Base Excel");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Cargar Base Médica");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Cargar Base Predefinida");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edición");

        buttonGroupMenu.add(jRadioButtonMenuItem1);
        jRadioButtonMenuItem1.setText("Activar Estadística");
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem1);

        buttonGroupMenu.add(jRadioButtonMenuItem2);
        jRadioButtonMenuItem2.setSelected(true);
        jRadioButtonMenuItem2.setText("Desactivar Estadísitca");
        jMenu3.add(jRadioButtonMenuItem2);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Ayuda");

        jMenuItem1.setText("Acerca de..");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRadioButtonInduccion)
                        .addGap(12, 12, 12)
                        .addComponent(jRadioButtonDeduccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonAbducción)
                        .addGap(27, 27, 27)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(jButtonEjecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldRegla, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxHechos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonHecho, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(jButtonRegla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jScrollPane4)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldRegla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonRegla)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonHecho, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonDeduccion)
                            .addComponent(jRadioButtonInduccion)
                            .addComponent(jRadioButtonAbducción))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonEjecutar)
                            .addComponent(jComboBoxHechos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(1, 1, 1)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(null, "Autor: Alberto Vázquez Martínez"
                + "\nMateria: Sistemas Expertos"
                + "\nProfesor: Alvaro de Albornoz");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonHechoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHechoActionPerformed
        String hecho = this.jComboBoxHechos.getSelectedItem().toString();
        //if (validarAgregarHecho(hecho)) {
        agregarHecho(hecho);
        //}

    }//GEN-LAST:event_jButtonHechoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (this.jListHechos.getSelectedIndex() != -1) {
            borrarHecho((String) jListHechos.getModel().getElementAt(jListHechos.getSelectedIndex()));
        } else {
            mostrarError("No se selecciono nada de la lista");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButtonReglaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReglaActionPerformed
        if (validarAgregarRegla(this.jTextFieldRegla.getText())) {
            agregarReglaProduccion(this.jTextFieldRegla.getText());
            jTextFieldRegla.setText("");
            this.sE.analizarHechos();
            this.actualizarListaHechosSeleccionables();
        }

    }//GEN-LAST:event_jButtonReglaActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (this.jListReglas.getSelectedIndex() != -1) {
            borrarRegla((String) jListReglas.getModel().getElementAt(jListReglas.getSelectedIndex()));
        } else {
            mostrarError("No se selecciono nada de la lista");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButtonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEjecutarActionPerformed
        this.sE.imprimeHechosInicio();
        hechosInicioResp = new ArrayList<>();
        for (int i = 0; i < sE.hechosInicio.size(); i++) {
            hechosInicioResp.add(sE.hechosInicio.get(i));
        }
        ejecutar();
    }//GEN-LAST:event_jButtonEjecutarActionPerformed

    private void jRadioButtonAbducciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAbducciónActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonAbducciónActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.sE.hechosInicio = new ArrayList<>();
        this.actualizarListaHechos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.sE.produccion = new ArrayList<>();
        this.sE.regla = new ArrayList<>();
        this.actualizarListaReglaProduccion();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        cargarBaseExcel();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        cargarBaseMedica();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        cargarBasePredefinida();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        this.mostrarError("No disponible");
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    private void jComboBoxHechosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxHechosKeyPressed
        System.out.println("key2");
        System.out.println(evt.getKeyCode());
        if (evt.getKeyCode() == 10) {
            System.out.println("enter");
            String hecho = this.jComboBoxHechos.getSelectedItem().toString();
            //if (validarAgregarHecho(hecho)) {
            agregarHecho(hecho);
            //}
        }
    }//GEN-LAST:event_jComboBoxHechosKeyPressed

    private void jComboBoxHechosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxHechosKeyTyped
        System.out.println("key");
    }//GEN-LAST:event_jComboBoxHechosKeyTyped

    public void cargarBasePredefinida() {
        abrirExcel("C:\\Users\\Alberto\\Desktop\\DatosSistemaExperto.xls");

    }

    public void cargarBaseMedica() {
        sE.cargarBaseConocimiento1();
    }

    public void cargarBaseExcel() {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Archivos XLSX", "xls");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + chooser.getSelectedFile().getPath());
            abrirExcel(chooser.getSelectedFile().getPath());
        }

    }

    public void abrirExcel(String path) {
        try {
            sE.regla = new ArrayList<String>();
            sE.produccion = new ArrayList<String>();
            sE.hechosSeleccionables = new ArrayList<String>();
            File inputWorkbook = new File(path);
            Workbook w;
            w = Workbook.getWorkbook(inputWorkbook);
            Sheet sheet = w.getSheet(0);
            //System.out.println("columnas: " + sheet.getColumns());
            //System.out.println("filas :" + sheet.getRows());
            //Primera columna (Reglas)
            //System.out.println("REGLAS");
            for (int i = 0; i < sheet.getRows(); i++) {
                Cell cell = sheet.getCell(0, i);
                CellType type = cell.getType();
                //System.out.println(cell.getContents());
                String temp = cell.getContents();
                System.out.println("temp: " + temp);
                StringTokenizer posiblesHechos = new StringTokenizer(temp, "+");
                while (posiblesHechos.hasMoreTokens()) {
                    String tkn = posiblesHechos.nextToken();
                    System.out.println(tkn);
                    sE.agregarHechoSeleccionable(tkn);
                }

                sE.regla.add(temp);
            }
            //Segunda columna (Producciones)
            //System.out.println("PRODUCCIONES");
            for (int i = 0; i < sheet.getRows(); i++) {
                Cell cell = sheet.getCell(1, i);
                CellType type = cell.getType();
                //System.out.println(cell.getContents());
                String temp = cell.getContents();
                StringTokenizer tokens = new StringTokenizer(temp, " ");
                String vecProduccion = "";
                int k = 0;
                while (tokens.hasMoreTokens()) {
                    vecProduccion += tokens.nextToken();
                    //System.out.println(vecProduccion[k]);
                    k++;
                }
                sE.produccion.add(vecProduccion);
            }
            this.actualizarListaHechos();
            this.actualizarListaReglaProduccion();
            this.actualizarListaHechosSeleccionables();
        } catch (Exception e) {
            e.printStackTrace();
            this.mostrarError("No se ha podido abrir el excel.. compruebe que la base esta escrita en el formato correcto");
        }
    }

    /**
     * Muestra los hechos de inicio actuales
     */
    public void imprimeHechosInicioResp() {
        System.out.println("\nHECHOS INICIO RESP");
        for (int i = 0; i < hechosInicioResp.size(); i++) {
            System.out.println(hechosInicioResp.get(i));
        }
        System.out.println("\n\n");
    }

    public void ejecutar() {
        //Obtengo si es individual o general. 
        for (Enumeration<AbstractButton> buttons = buttonGroupInduccionDeduccionAbduccion.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                switch (button.getText()) {
                    case "Inducción":
                        if (!jListReglas.isSelectionEmpty()) {
                            this.sE.induccion(jListReglas.getSelectedIndex());
                            this.sE.hechosInicio = this.hechosInicioResp;
                        } else {
                            this.mostrarError("Por favor seleccione un objetivo de la lista");
                        }
                        break;
                    case "Deducción":
                        this.sE.deduccion();
                        this.sE.hechosInicio = this.hechosInicioResp;
                        break;
                    case "Abducción":
                        if (!jListReglas.isSelectionEmpty()) {
                            this.sE.abduccion(jListReglas.getSelectedIndex());
                            this.sE.hechosInicio = this.hechosInicioResp;
                        } else {
                            this.mostrarError("Por favor seleccione un objetivo de la lista");
                        }
                        break;
                    case "Intuición":
                        this.mostrarError("No disponible");
                        break;
                }
            }
        }
    }

    public void mostrarError(String error) {
        JOptionPane.showMessageDialog(null, error, "Error", JOptionPane.ERROR_MESSAGE);
    }

    public boolean validarAgregarHecho(String hecho) {
        //Siempre es solo una letra
        if (hecho.length() == 1) {
            Character char1 = hecho.toCharArray()[0];
            if (Character.isLetter(char1)) {
                return true;
            } else {
                mostrarError("Los hechos requieren ser solo letras");
                return false;
            }
        } else {
            mostrarError("Los hechos requieren ser caracteres unicos");
            return false;
        }
    }

    public boolean validarAgregarRegla(String regla) {
        if (regla.contains("->")) {
            String split[] = regla.split("->");
            if (split.length > 1 && split[0].length() > 0 && split[1].length() > 0) {
                return true;
            } else {
                mostrarError("Debe existir al menos un caracter del lado derecho e izquierdo. Ejem: A->B");
            }
        } else {
            mostrarError("La lista de reglas requiere producir. Ejem: A->B");
            return false;
        }

        return false;
    }

    public void borrarHecho(String hecho) {
        System.out.println("borrando hecho: " + hecho);
        for (int i = 0; i < sE.hechosInicio.size(); i++) {
            if (sE.hechosInicio.get(i).equals(hecho)) {
                sE.hechosInicio.remove(i);
            }
        }
        actualizarListaHechos();
    }

    public void borrarRegla(String regla) {
        //System.out.println("borrando regla: " + regla);
        String reglaTemp;
        for (int i = 0; i < sE.regla.size(); i++) {
            reglaTemp = sE.regla.get(i) + "->" + sE.produccion.get(i);
            //System.out.println("buscando: " + reglaTemp);
            if (reglaTemp.equals(regla)) {
                //System.out.println("encontrado. borrando");
                sE.regla.remove(i);
                sE.produccion.remove(i);
            }
        }
        actualizarListaReglaProduccion();
    }

    public void agregarHecho(String hecho) {
        System.out.println("ag");
        if (!sE.buscarHechoInicio(hecho)) {
            this.sE.hechosInicio.add(hecho);
            sE.imprimeHechosInicio();
            actualizarListaHechos();
        }
    }

    public void agregarReglaProduccion(String regla) {
        String split[] = regla.split("->");
        sE.regla.add(split[0]);//Regla
        //Analizo la regla para agregar como hecho seleccionable
        StringTokenizer tokens = new StringTokenizer(split[0], "+ -");
        while (tokens.hasMoreTokens()) {
            String temp = tokens.nextToken();
            System.out.println("seleccionables: " + temp);
            sE.agregarHechoSeleccionable(temp);
        }
        sE.produccion.add(split[1]);//Produccion
        sE.imprimeReglas();
        this.actualizarListaReglaProduccion();
    }

    public void actualizarListaHechos() {
        DefaultListModel listaHechos = new DefaultListModel();
        for (int i = 0; i < sE.hechosInicio.size(); i++) {
            listaHechos.addElement(sE.hechosInicio.get(i));
        }
        this.jListHechos.setModel(listaHechos);
    }

    public void actualizarListaReglaProduccion() {
        DefaultListModel listaReglasProduccion = new DefaultListModel();
        for (int i = 0; i < sE.regla.size(); i++) {
            listaReglasProduccion.addElement(sE.regla.get(i) + "->" + sE.produccion.get(i));
        }
        this.jListReglas.setModel(listaReglasProduccion);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupIndividualGeneral;
    private javax.swing.ButtonGroup buttonGroupInduccionDeduccionAbduccion;
    private javax.swing.ButtonGroup buttonGroupMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonEjecutar;
    private javax.swing.JButton jButtonHecho;
    private javax.swing.JButton jButtonRegla;
    private javax.swing.JComboBox jComboBoxHechos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListHechos;
    private javax.swing.JList jListReglas;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButtonAbducción;
    private javax.swing.JRadioButton jRadioButtonDeduccion;
    private javax.swing.JRadioButton jRadioButtonInduccion;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextAreaResultado;
    private javax.swing.JTextField jTextFieldRegla;
    // End of variables declaration//GEN-END:variables
}
